// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  transactions  Transaction[]
  categories    Category[]
  budgets       Budget[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Wallet {
  id            String        @id @default(cuid())
  userId        String
  name          String
  type          String        @default("cash") // cash, bank, credit_card, crypto
  currency      String        @default("USD")
  color         String?
  icon          String?
  initialAmount Decimal       @default(0) @db.Decimal(15, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]

  @@index([userId])
}

model Category {
  id           String        @id @default(cuid())
  userId       String
  name         String
  color        String?
  emoji        String?
  type         String        @default("expense") // income, expense
  isDefault    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@index([userId])
}

model Transaction {
  id          String    @id @default(cuid())
  userId      String
  walletId    String
  categoryId  String?
  type        String // income, expense
  amount      Decimal   @db.Decimal(15, 2)
  description String?
  date        DateTime
  tags        String[]
  attachment  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  wallet      Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([walletId])
  @@index([categoryId])
  @@index([date])
}

model Budget {
  id         String   @id @default(cuid())
  userId     String
  categoryId String?
  walletId   String?
  amount     Decimal  @db.Decimal(15, 2)
  period     String   @default("monthly") // monthly, weekly, yearly
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
}
